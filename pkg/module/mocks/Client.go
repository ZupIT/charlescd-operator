// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	mf "github.com/manifestival/manifestival"
	mock "github.com/stretchr/testify/mock"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Create provides a mock function with given fields: obj, options
func (_m *Client) Create(obj *unstructured.Unstructured, options ...mf.ApplyOption) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, obj)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*unstructured.Unstructured, ...mf.ApplyOption) error); ok {
		r0 = rf(obj, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: obj, options
func (_m *Client) Delete(obj *unstructured.Unstructured, options ...mf.DeleteOption) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, obj)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*unstructured.Unstructured, ...mf.DeleteOption) error); ok {
		r0 = rf(obj, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: obj
func (_m *Client) Get(obj *unstructured.Unstructured) (*unstructured.Unstructured, error) {
	ret := _m.Called(obj)

	var r0 *unstructured.Unstructured
	if rf, ok := ret.Get(0).(func(*unstructured.Unstructured) *unstructured.Unstructured); ok {
		r0 = rf(obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*unstructured.Unstructured)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*unstructured.Unstructured) error); ok {
		r1 = rf(obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: obj, options
func (_m *Client) Update(obj *unstructured.Unstructured, options ...mf.ApplyOption) error {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, obj)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*unstructured.Unstructured, ...mf.ApplyOption) error); ok {
		r0 = rf(obj, options...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
