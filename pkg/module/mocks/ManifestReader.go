// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	manifestival "github.com/manifestival/manifestival"
	mock "github.com/stretchr/testify/mock"

	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
)

// ManifestReader is an autogenerated mock type for the ManifestReader type
type ManifestReader struct {
	mock.Mock
}

// FromBytes provides a mock function with given fields: ctx, manifests
func (_m *ManifestReader) FromBytes(ctx context.Context, manifests []byte) (manifestival.Manifest, error) {
	ret := _m.Called(ctx, manifests)

	var r0 manifestival.Manifest
	if rf, ok := ret.Get(0).(func(context.Context, []byte) manifestival.Manifest); ok {
		r0 = rf(ctx, manifests)
	} else {
		r0 = ret.Get(0).(manifestival.Manifest)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, manifests)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FromString provides a mock function with given fields: ctx, manifests
func (_m *ManifestReader) FromString(ctx context.Context, manifests string) (manifestival.Manifest, error) {
	ret := _m.Called(ctx, manifests)

	var r0 manifestival.Manifest
	if rf, ok := ret.Get(0).(func(context.Context, string) manifestival.Manifest); ok {
		r0 = rf(ctx, manifests)
	} else {
		r0 = ret.Get(0).(manifestival.Manifest)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, manifests)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FromUnstructured provides a mock function with given fields: ctx, manifests
func (_m *ManifestReader) FromUnstructured(ctx context.Context, manifests []unstructured.Unstructured) (manifestival.Manifest, error) {
	ret := _m.Called(ctx, manifests)

	var r0 manifestival.Manifest
	if rf, ok := ret.Get(0).(func(context.Context, []unstructured.Unstructured) manifestival.Manifest); ok {
		r0 = rf(ctx, manifests)
	} else {
		r0 = ret.Get(0).(manifestival.Manifest)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []unstructured.Unstructured) error); ok {
		r1 = rf(ctx, manifests)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadDefaults provides a mock function with given fields: ctx
func (_m *ManifestReader) LoadDefaults(ctx context.Context) (manifestival.Manifest, error) {
	ret := _m.Called(ctx)

	var r0 manifestival.Manifest
	if rf, ok := ret.Get(0).(func(context.Context) manifestival.Manifest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(manifestival.Manifest)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
