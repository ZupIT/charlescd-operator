// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package controllers

import (
	"github.com/manifestival/client-go-client"
	"github.com/tiagoangelozup/charles-alpha/internal/manifests"
	"github.com/tiagoangelozup/charles-alpha/internal/module"
	"github.com/tiagoangelozup/charles-alpha/internal/object"
	"github.com/tiagoangelozup/charles-alpha/internal/runtime"
	"github.com/tiagoangelozup/charles-alpha/internal/source"
	"github.com/tiagoangelozup/charles-alpha/pkg/filter"
	"github.com/tiagoangelozup/charles-alpha/pkg/transformer"
	"github.com/tiagoangelozup/charles-alpha/pkg/usecase"
	"sigs.k8s.io/controller-runtime/pkg/manager"
)

// Injectors from wire.go:

func createReconcilers(managerManager manager.Manager) ([]Reconciler, error) {
	config := runtime.Config(managerManager)
	manifestivalClient, err := client.NewClient(config)
	if err != nil {
		return nil, err
	}
	service := &manifests.Service{
		Client: manifestivalClient,
	}
	scheme := runtime.Scheme(managerManager)
	unstructuredConverter := &object.UnstructuredConverter{
		Scheme: scheme,
	}
	gitRepository := transformer.NewGitRepository(unstructuredConverter)
	reference := &object.Reference{
		Scheme: scheme,
	}
	metadata := transformer.NewMetadata(reference)
	transformers := &usecase.Transformers{
		GitRepository: gitRepository,
		Metadata:      metadata,
	}
	filterGitRepository := &filter.GitRepository{}
	filters := &usecase.Filters{
		GitRepository: filterGitRepository,
	}
	desiredState := usecase.NewDesiredState(service, transformers, filters)
	clientClient := runtime.Client(managerManager)
	sourceService := &source.Service{
		Client: clientClient,
	}
	helmInstallation := usecase.NewHelmInstallation(sourceService)
	moduleService := &module.Service{
		Client: clientClient,
	}
	moduleReconciler := &ModuleReconciler{
		DesiredState:     desiredState,
		HelmInstallation: helmInstallation,
		ModuleGetter:     moduleService,
	}
	v := reconcilers(moduleReconciler)
	return v, nil
}
